{"title":"Blog Post 1: Exploring Quarto and more","markdown":{"yaml":{"title":"Blog Post 1: Exploring Quarto and more","subtitle":"What I learned while working on assignment 1","author":"Bel Khuu","date":"2022-09-18","categories":["Code","R","Blog"],"image":"image.jpg","draft":false,"freeze":true,"format":{"html":{"code-fold":true,"code-tools":true,"code-copy":true}}},"headingText":"I. Exploring the guide on Quarto.org","containsRefs":false,"markdown":"\n\n\nThe guide on quarto.org is great tool to start this website. However, it took me some time to get familiarized with it. I started by running the codes for a lot of the examples. I was also doing Google searches of what I wanted to do with my website before realizing that most of the information I needed was in the guide! I will mention the guide page every now and then below.\n\n### A. Copying code chunks\n\nThe little button that on the top right corner of the code chunks serves as a great tool to copy and paste the code chunks. I didn't understand why turning off echo or applying code folding didn't work properly for me. Maybe, it was due to bad indentation, spacing... I spent a good hour trying to find different ways to do the same thing. Finally, the problems went away the moment I start using these buttons instead of highlighting the codes and copying them.\n\nTo see an example, expand the note below.\n\n::: {.callout-note collapse=\"true\"}\nTo show the copy button for your own website, add this in your title block:\n\n``` yaml\nformat:\n  html:\n    code-copy: true\n```\n\nValid values for `code-copy` include:\n\n|         |                                |\n|---------|--------------------------------|\n| `hover` | Show button on hover (default) |\n| `true`  | Always show code copy button   |\n| `false` | Never show code copy button    |\n\nMy title block for this post looks like this!\n\n``` yaml\n---\ntitle: \"Blog Post 1: Exploring Quarto and more\"\nsubtitle: \"What I learned while working on assignment 1\"\nauthor: \"Bel Khuu\"\ndate: \"2022-09-12\"\ncategories: [Code, R, Art, Assignment]\nimage: \"image.jpg\"\ndraft: true\nformat:\n  html:\n    code-fold: true\n    code-tools: true\n    code-copy: true\n---\n```\n:::\n\n### B. Blogs on Quarto\n\nWhen I decided that I wanted a blog setup for this assignment tab, there wasn't anything in the guide that talked about this. You either build a website or you build a blog.\n\nI figured that I should just create a temporary blog to see how it was different compared to a Quarto website. I found the files I needed and just copied them back my original project.\n\nThis is definitely an unusual way to do this. You can find the more straight forward way to do this under Listing Pages, under [Documents Listings](https://quarto.org/docs/websites/website-listings.html) in the Quarto guide. Like I said, I explored around a lot before understanding that all I needed can be found in the guide. The note below is exactly what I did.\n\nYou can skip all the blog creation by downloading this [Blog.zip](https://github.com/belkhuu/belkhuu.github.io/blob/main/Blog.zip) file on my github page. Extract the files, then jump to the Merge the two project bullet point.\n\n::: {.callout-note collapse=\"true\"}\n-   Add a new folder on GitHub by creating a new file. I created a read me file in a new \"Assignment\" folder. I typed \"newfoldername/readme.md\". This will create a new website branch. It will become a new directory for a Quarto project.\n\n    -   belkhuu.github.io will be referred to as **website project**\n\n    -   belkhuu.github.io/Assignments/ will be referred to as **blog project**\n\n-   Start a new project in R with the new directory and choose Quarto Blog.\n\n-   Inspect the initial project folder, yaml and index files from the blog project folder\n\n-   Merge the two project:\n\n    -   Rename the index.qmd to assignments.qmd\n\n    -   Copy the posts folder\n\n    -   Paste both to my website project folder\n\n    -   Make sure I added the Assignments tab is created in the website's yaml file.\n:::\n\n## II. Understanding how to upload Quarto files to GitHub\n\nBefore publishing the changes to my website, I had to keep reminding myself of the following:\n\n-   **Manually set the directory** to belkhuu.github.io, just in case I was working on something else.\n\n-   **Render the website on RStudio** before uploading file from the \\_site folder to GitHub\n\n-   **Only pull what's inside the \\_site folder** to GitHub and not the folder itself\n\n## III. Create a more customized and sleek look for my website\n\nI honestly spent most of the time working on the assignment on this part.\n\n### A. Hiding things\n\nYou can check out the Quarto guide under the name of [HTML Code Blocks](https://quarto.org/docs/output-formats/html-code.html).\n\n#### 1. Hide huge code blocks with code folding\n\nAdd this in your title block.\n\n``` yaml\nformat:\n  html:\n    code-fold: true\n```\n\n#### 2. Hide small or sections of code blocks by turning off echo\n\nJust add `#| echo: false` at the beginning of your R block.\n\n#### 3. Hide warning messages\n\nJust add `#| warning: false` at the beginning of your R block.\n\nEvery time I run the codes with the tidyverse library, it keeps giving me this block of warning, which is what you would see in the console. So after hiding all the code blocks, I couldn't hide this part of the output. It was upsetting.\n\n#### 4. Hide/Collapse note or tips using Callout Blocks\n\nI will talk more about callout blocks in section E. since it is something that I learned as I was working on this first blog post.\n\n### B. Insert media\n\nI just learned in the 9/13 lab that you can just click on the Insert Button using the Visual mode in R.I haven't really explore this option yet.\n\n![](Capture.PNG)\n\nBelow, I have codes that you can copy to your code chunks.\n\n#### 1. Images\n\nThis is just like using R markdown. I love pulling the images using a URL. This way, I don't have to download it!\n\nInsert image from a local folder:\n\n``` yaml\n![](image.jpg)\n![](image.PNG)\n```\n\nInsert image using a URL:\n\n``` yaml\n![](https://cpb-us-e2.wpmucdn.com/sandbox.utdallas.edu/dist/3/949/files/FL17-Logos.jpg)\n```\n\n::: {.callout-tip collapse=\"false\"}\nWhen using a URL, you need to grab to correct link:\n\n-   Right click and select \"Open image in new tab\"\n\n-   Then, right click and select \"Copy image address\"\n:::\n\n#### 2. Embed Videos\n\nI used a package that I found online called [vembedr](https://cran.r-project.org/web/packages/vembedr/vignettes/embed.html). The package lets you use the URL for YouTube, Vimeo, Box and Microsoft Stream.\n\nHere is an example of what my code chunk for Assignment 1.\n\n``` yaml\n#| warning: false\n#| label: fig-karen\n#| fig-cap: \"KarenXCheng uses Dall-E 2, an AI tool, to generate images. \"\n\nlibrary(\"vembedr\")\nembed_url(\"https://youtu.be/eUSx4_S6O34\")%>%\n  use_align(\"center\")\n```\n\n#### 3. Hyperlinking URLs\n\n``` yaml\n[Name your link](github.com)\n```\n\n### C. Live references and captions\n\nThis is called [Cross References](https://quarto.org/docs/authoring/cross-references.html) on the Quarto guide.\n\n#### 1. In R blocks\n\n``` yaml\n#| label: fig-lightgreen\n#| fig-cap: \"Light Green Color\"\n```\n\n#### 2. In text blocks\n\nTo my understanding this is a different type of markdown language.\n\n``` yaml\n\n::: {#fig-sprawl}\n![](https://images.squarespace-cdn.com/content/v1/5c77350965a707ed1710a1bc/1588698303774-0O4IBACSMA5J5ZB00ZOC/Sprawl+Generative+Art+by+Mark+J.+Stock.jpeg?format=1000w%22){width=\"60%\"}\n\nSprawl by Mark J. Stock <- this is the caption!\n\n:::\n```\n\n#### 3. Refer to figure in text\n\n``` yaml\n@fig-lightgreen is a modified version of \"Fall Color\"\n```\n\n### D. Theme of the website\n\nJust change the theme in the \\_quarto.yml file! Check out the different themes on the Quarto guide. It is called [HTML theming](https://quarto.org/docs/output-formats/html-themes.html).\n\n``` yaml\nformat:\n  html:\n    theme: slate\n    css: styles.css\n    toc: true\n```\n\n### E. More website tools I learned about while creating this blog post.\n\n#### 1. Add Copy Button\n\nAdd this block in your qmd file.\n\n``` yaml\nformat:\n  html:\n    code-copy: true\n```\n\n#### 2. A Callout Box\n\nYou can check out the [Callout Blocks](https://quarto.org/docs/authoring/callouts.html) in the Quarto guide. You can choose the type of callout box, and whether you want it to be collapsed by default.\n\n``` yaml\n::: {.callout-note collapse=\"true\"}\n\nWhatever you want to highlight here!\n\n:::\n```\n\n#### 3. Draft function\n\nBasically, you can render your website without publishing the new post.\n\nJust add `draft: false` to your title block.\n\n## IV. Final notes\n\nI learned all of the things above before I realized that the Prepare for Class 3 has a great reference for what I needed, [How to Build a Quarto blog](https://rstd.io/build-quarto-blog) guide by Isabella VelÃ¡squez. That being said, it was not as interactive as the Quarto guide!\n\nI'm not too happy with this first post yet. One thing I want to change is to fix the text wrap so that when the code chunks are too long, you won't have to use the cursor.\n\n#### Working on Cloud storage\n\nIf you are like me and love to work on cloud storage, you will find this tip helpful. Please note that this might only with cloud storage apps that have a desktop drop folder. For this project, I used the University's OneDrive folder.\n\n::: {.callout-tip collapse=\"false\"}\nCreate your R project on a desktop location first, then move it to the cloud folder!\n:::\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"index.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.1.189","editor":"visual","theme":"spacelab","title-block-banner":true,"title":"Blog Post 1: Exploring Quarto and more","subtitle":"What I learned while working on assignment 1","author":"Bel Khuu","date":"2022-09-18","categories":["Code","R","Blog"],"image":"image.jpg","draft":false,"code-copy":true},"extensions":{"book":{"multiFile":true}}}}}